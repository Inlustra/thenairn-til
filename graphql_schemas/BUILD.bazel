# Add rules here to build your software
# See https://docs.bazel.build/versions/master/build-ref.html#BUILD_files

# Allow any ts_library rules in this workspace to reference the config
# Note: if you move the tsconfig.json file to a subdirectory, you can add an alias() here instead
#   so that ts_library rules still use it by default.
#   See https://www.npmjs.com/package/@bazel/typescript#installation
load("@build_bazel_rules_nodejs//:index.bzl", "npm_package")
load("@npm_bazel_typescript//:index.bzl", "ts_library")

exports_files(
    ["tsconfig.json"],
    visibility = ["//:__subpackages__"],
)

genrule(
    name = "schema-types",
    srcs = glob([
        "**/*.graphql",
        "node_modules/**",
    ]) + [
        "package.json",
        "tsconfig.json",
    ],
    outs = ["index.ts"],
    cmd = """
    cat << EOF > codegen.yml
    schema: "schemas/*.graphql"
    generates:
      $@:
        config:
          useIndexSignature: true
          noSchemaStitching: true
        plugins:
          - typescript
          - typescript-resolvers
          - typescript-operations
EOF
        ./node_modules/.bin/graphql-codegen
    """,
)

ts_library(
    name = "compile",
    srcs = [":schema-types"],
    deps = [
      "@npm//graphql",
    ],
)

npm_package(
    name = "package",
    srcs = ["package.json"] + glob(["schemas/**"]),
    replacements = {"//internal/": "//"},
    deps = [":compile"],
)
